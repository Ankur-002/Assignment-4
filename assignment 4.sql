use mavenmovies;

-- Q1. Identify a table in the mavenmovies database that violates 1NF. Explain how you would normalize it to achieve 1NF.
-- Ans: Film table in mavenmovies database contains a column "Special Feature" which is containig multiple details such as 
-- trailer, commentaries, deleted scens and all. So it is violating the 1NF.
-- we can correct this by adding one more table with all these details to normalize it.

-- Q2. Choose a table in Sakila and describe how you would determine whether it is in 2NF. If it violates 2NF,explain the steps to normalize it.
-- On analysing Sakila dataase we can find last_update column is not fully dependent on the entire composite primary key (film_id, category_id). 
-- It is partially dependent on only one part of the key, film_id. This violates 2NF.
-- To normalize the table to achieve 2NF, I would create a separate table for the partially dependent attributes.

-- Q5. Write a query using a CTE to retrieve the distinct list of actor names and the number of films they have acted in from the actor and film_actor tables.

WITH ActorFilmCounts AS (
  SELECT
    a.actor_id,
    CONCAT(a.first_name, ' ', a.last_name) AS actor_name,
    COUNT(fa.film_id) AS film_count
  FROM
    actor a
    JOIN film_actor fa ON a.actor_id = fa.actor_id
  GROUP BY
    a.actor_id, actor_name
)

SELECT
  actor_id,
  actor_name,
  film_count
FROM
  ActorFilmCounts
ORDER BY
  film_count DESC, actor_name;

-- Q7. Create a CTE that combines information from the film and language tables to display the film title, language name, and rental rate.
With film_language_info as (
select f.film_id,
f.title as film_title,
l.name as language_name,
f.rental_rate
from film f join language l on f.language_id = f.language_id
)
select film_id, film_title, language_name, rental_rate
from film_language_info
order by film_id;


-- Q8. Write a query using a CTE to find the total revenue generated by each customer (sum of payments) from the customer and payment tables.
with customer_revenue as (
select 
c.customer_id,
concat(c.first_name, " ", c.last_name) as customer_name,
sum(p.amount) as total_revenue
from customer C inner join payment p on c.customer_id = p.customer_id
group by c.customer_id, customer_name
)
select customer_id, customer_name, total_revenue
from customer_revenue
order by customer_id;

-- Q9. Utilize a CTE with a window function to rank films based on their rental duration from the film table.
with film_ranking as (
select film_id, title, rental_duration,
rank() over (order by rental_duration DESC) as rental_duration_rank
from film
)
select film_id, title, rental_duration, rental_duration_rank
from film_ranking
order by rental_duration_rank;

-- Q10. Create a CTE to list customers who have made more than two rentals, and then join this CTE with the customer table to retrieve additional customer details.
with customer_rental as (
select customer_id,
count(rental_id) as total_rental
from rental
group by customer_id
having count(rental_id) > 2
)
select c.customer_id, 
concat(c.first_name, " ", c.last_name),
cr.total_rental
from customer c inner join customer_rental cr on c.customer_id = cr.customer_id
order by c.customer_id;

-- Q11. Write a query using a CTE to find the total number of rentals made each month, considering the Rental_date from rental the table.
with monthly_rental as (
select extract(year_month from rental_date) as rental_month,
count(rental_id) as total_rentals
from rental
group by rental_month )
select rental_month, total_rentals
from monthly_rental
order by rental_month;

-- Q12. Use a CTE to pivot the data from the payment table to display the total payments made by each customer in separate columns for different payment methods.
with payment_pivot as (
select customer_id,
sum(case when payment_type = 'CASH' then amount else 0 end) as cash_payment,
sum(case when payment_type = 'CREDIT_CARD' then amount else 0 end) as credit_card_payment,
sum(case when payment_type = 'debit_card' then amount else 0 end) as debit_card_payment,
sum(case when payment_tpe = 'Check' then amount else 0 end) as check_paymenr
from payment 
group by customer_id
)
select pp.customer_id,
pp.cash_payment,
pp.credit_card_payment,
pp.debit_card_payment,
pp.check_payment
from payment_pivot as pp join customer c on c.customer_id = pp.customer_id
order by pp.customer_id; 

-- Q13. Create a CTE to generate a report showing pairs of actors who have appeared in the same film together, using the film_actor table.
with Actor_pair as (
select fa1.actor_id as actor1_id,
a1.first_name as actor1_first_name,
a1.last_name as actor1_last_name,
fa2.actor_id as actor2_id,
a2.first_name as actor2_first_name,
a2.last_name as actor2_last_name,
f.film_id,
f.title as film_title
from 
film_actor fa1 join film_actor fa2 on fa1.film_id = fa2.film_id and fa1.actor_id < fa2.actor_id
join actor a1 on fa1.actor_id = a1.actor_id
join actor a2 on fa2.actor_id = a2.actor_id
join film f on fa1.film_id = f.film_id
)
select actor1_id, concat(actor1_first_name, " ",actor1_last_name),
actor2_id, concat(actor2_first_name, " ", actor2_last_name),
film_id, film_title
from actor_pair
order by film_id,actor1_id, actor2_id;


 